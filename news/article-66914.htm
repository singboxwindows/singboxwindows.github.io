<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://singboxwindows.github.io/news/article-66914.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>SpringBoot2.0.4配置多个数据库</title>
        <meta name="description" content="使用场景： 一个Spring Boot服务根据不同的业务逻辑需要对不同的数据库进行操作。 一、举例说明 假设需要处理的两个数据库是test1、test2，那么必须要有的是：  两个数据库的配置参数（写" />
        <link rel="icon" href="/assets/website/img/singboxwindows/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="SingBox Windows免费节点订阅站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://singboxwindows.github.io/news/article-66914.htm" />
    <meta property="og:site_name" content="SingBox Windows免费节点订阅站" />
    <meta property="og:title" content="SpringBoot2.0.4配置多个数据库" />
    <meta property="og:image" content="https://singboxwindows.github.io/uploads/20240731/3b772637bed7446e379aa6498eda093c.webp" />
        <meta property="og:release_date" content="2025-03-04T10:13:49" />
    <meta property="og:updated_time" content="2025-03-04T10:13:49" />
        <meta property="og:description" content="使用场景： 一个Spring Boot服务根据不同的业务逻辑需要对不同的数据库进行操作。 一、举例说明 假设需要处理的两个数据库是test1、test2，那么必须要有的是：  两个数据库的配置参数（写" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="SpringBoot2.0.4配置多个数据库">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">

    <link rel="stylesheet" href="/assets/website/css/singboxwindows/app.css">
    <link href="https://fonts.googleapis.com/css?family=Nunito:300,400,500,600,700,800,900&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://maxcdn.icons8.com/fonts/line-awesome/1.1/css/line-awesome-font-awesome.min.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-B99XD3HGG8"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-B99XD3HGG8');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <nav class="navbar navbar-expand-lg fixed-top py-3 navbar-light" id="mainNav">
        <div class="container"> 
            <a class="navbar-brand" href="/">
                        <span>SingBox Windows</span>
                        </a>
            <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarResponsive" aria-controls="navbarResponsive" aria-expanded="false" aria-label="Toggle navigation"> <span class="navbar-toggler-icon"></span> </button>
            <div class="collapse navbar-collapse" id="navbarResponsive">
                <ul class="navbar-nav ml-auto">
                                        <li class="nav-item"> <a class="nav-link" href="/">首页</a> </li>
                                        <li class="nav-item"> <a class="nav-link" href="/free-nodes/">免费节点</a> </li>
                                        <li class="nav-item"> <a class="nav-link" href="/paid-subscribe/">推荐机场</a> </li>
                                        <li class="nav-item"> <a class="nav-link" href="/client.htm">客户端</a> </li>
                                        <li class="nav-item"> <a class="nav-link" href="/news/">新闻资讯</a> </li>
                                    </ul>
            </div>
        </div>
    </nav>
    <main role="main">
        <div class="contact_header jumbotron text-center">
            <h1 class="display-4">SpringBoot2.0.4配置多个数据库</h1>
            <p>
                <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / <span>正文</span>
            </p>
        </div>
        <section class="bg-image-2 position-relative"> <img src="/assets/website/img/singboxwindows/mix-icons.png" alt="" class="bg-img-2">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="markdown_views prism-tomorrow-night-eighties"> <p>使用场景： 一个Spring Boot服务根据不同的业务逻辑需要对不同的数据库进行操作。</p> <h4><a id="_2" rel="nofollow"></a>一、举例说明</h4> <p>假设需要处理的两个数据库是test1、test2，那么必须要有的是：</p> <ol> <li>两个数据库的配置参数（写在配置文件<code>application.properties</code>）。</li> <li>两个数据库的<code>DataSource</code>实例，代码中用来处理两个数据库连接的代码。</li> <li>两个数据库表对应的相应的<code>JavaBean</code>。</li> <li>操作（DML）两个数据库的<code>Repository</code>。</li> <li>将以上提到的配置、实例等整合到一起，分别对不同数据库进行事务管理配置，也必须有两部分。</li> </ol> <h4><a id="_11" rel="nofollow"></a>二、代码逻辑</h4> <p>上面提到的必要条件都是“两个”，那么就必须要有区分，这样才能保证操作一个数据库表时不会影响到另外一个数据库中的表。下面整理一下Spring boot是如何对每部分进行区分的。</p> <ol> <li>配置文件中数据库参数是利用<strong>前缀</strong>来区分不同的配置。</li> <li><code>DataSource</code>实例是利用前缀去创建相应的实例，并且为每个<code>DataSource</code>使用不同的beanName。</li> <li>不同数据库表对应的<code>JavaBean</code>是通过<strong>包名</strong>来划分的。（也可以通过类名划分）。</li> <li><code>Repository</code>也是通过包名划分的。（也可以通过类名划分）</li> <li>通过装配相对应的bean、包名、配置来实现相对应的整合。</li> </ol> <h4><a id="_20" rel="nofollow"></a>三、代码逻辑</h4> <p>继续上面提的test1、test2数据库，假设test1中只有一个user1表，test2中只有一个user2表，完成多数据源的代码实现。</p> <p><b>第1步：</b><code>application.properties</code>配置文件入下：</p> <pre><code class="prism language-c"><span class="token macro property">#test1数据库的配置</span> test1<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>jdbcUrl<span class="token operator">=</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.105</span><span class="token punctuation">:</span><span class="token number">3306</span><span class="token operator">/</span>test1<span class="token operator">?</span>createDatabaseIfNotExist<span class="token operator">=</span>true<span class="token operator">&amp;</span>useUnicode<span class="token operator">=</span>true<span class="token operator">&amp;</span>characterEncoding<span class="token operator">=</span>UTF<span class="token operator">-</span><span class="token number">8</span> test1<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>username<span class="token operator">=</span> mysql test1<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>password<span class="token operator">=</span> mysql test1<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>driverClassName<span class="token operator">=</span> com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>Driver<span class="token macro property">#test2数据库的配置</span> test2<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>jdbcUrl<span class="token operator">=</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.105</span><span class="token punctuation">:</span><span class="token number">3306</span><span class="token operator">/</span>test2<span class="token operator">?</span>createDatabaseIfNotExist<span class="token operator">=</span>true<span class="token operator">&amp;</span>useUnicode<span class="token operator">=</span>true<span class="token operator">&amp;</span>characterEncoding<span class="token operator">=</span>UTF<span class="token operator">-</span><span class="token number">8</span> test2<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>username<span class="token operator">=</span> mysql test2<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>password<span class="token operator">=</span> mysql test2<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>driverClassName<span class="token operator">=</span> com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>Driver</code></pre> <p>配置文件中要注意：</p> <blockquote> <ul> <li><b><code>jdbcUrl</code>可以写成<code>jdbc-url</code>，不能写成<code>jdbc.url</code>或<code>url</code></b>。</li> <li><b><code>driverClassName</code>可以写成<code>driver-class-name</code>，不能写成<code>driver.class.name</code></b></li> </ul> </blockquote> <p><b>第2步：</b><code>DataSource</code>实例的创建，这个实例需要写在一个类里面，实例创建时，要用到配置文件中的不同数据参数的前缀，创建相应的实例。</p> <p><b>DataSourceConfig代码如下：</b></p> <pre><code class="prism language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xyh<span class="token punctuation">.</span>test<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>zaxxer<span class="token punctuation">.</span>hikari<span class="token punctuation">.</span>HikariDataSource<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Qualifier<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>DataSourceProperties<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>ConfigurationProperties<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>DataSourceBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Primary<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DataSource<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">DataSourceConfig</span><span class="token punctuation">{<!-- --></span><span class="token comment">/**      * 创建test1的DataSource实例      * @return      */</span><span class="token annotation punctuation">@Primary</span><span class="token comment">//配置一个主连接</span><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"test1DataSource"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"test1DataSource"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix<span class="token operator">=</span><span class="token string">"test1.spring.datasource"</span><span class="token punctuation">)</span><span class="token keyword">public</span> DataSource<span class="token function">test1DataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span> DataSourceBuilder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/**      * 创建test2的DataSource实例      * @return      */</span><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"test2DataSource"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"test2DataSource"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix<span class="token operator">=</span><span class="token string">"test2.spring.datasource"</span><span class="token punctuation">)</span><span class="token keyword">public</span> DataSource<span class="token function">test2aryDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span> DataSourceBuilder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p><b>第3步：</b> 创建数据库表对应的JavaBean，test1和test2数据库中的表分别放在相应名称的包下。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220603/4278fb41566b24bc1eef86ae2f21aa71.jpg" alt="SpringBoot2.0.4配置多个数据库"></p> <p><strong>User1代码如下：</strong></p> <pre><code class="prism language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xyh<span class="token punctuation">.</span>test<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>test1<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>hibernate<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>GenericGenerator<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span>Column<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span>Entity<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span>GeneratedValue<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span>Id<span class="token punctuation">;</span><span class="token annotation punctuation">@Entity</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">User1</span><span class="token punctuation">{<!-- --></span><span class="token annotation punctuation">@Id</span><span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>length<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token annotation punctuation">@GenericGenerator</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"sys_uuid"</span><span class="token punctuation">,</span> strategy<span class="token operator">=</span><span class="token string">"uuid"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>generator<span class="token operator">=</span><span class="token string">"sys_uuid"</span><span class="token punctuation">)</span><span class="token keyword">private</span> String id<span class="token punctuation">;</span><span class="token keyword">private</span> String name<span class="token punctuation">;</span><span class="token comment">//……省略get/set方法</span><span class="token punctuation">}</span></code></pre> <p><strong>User2代码如下：</strong></p> <pre><code class="prism language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xyh<span class="token punctuation">.</span>test<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>test1<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>hibernate<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>GenericGenerator<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span>Column<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span>Entity<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span>GeneratedValue<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span>Id<span class="token punctuation">;</span><span class="token annotation punctuation">@Entity</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">User1</span><span class="token punctuation">{<!-- --></span><span class="token annotation punctuation">@Id</span><span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>length<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token annotation punctuation">@GenericGenerator</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"sys_uuid"</span><span class="token punctuation">,</span> strategy<span class="token operator">=</span><span class="token string">"uuid"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>generator<span class="token operator">=</span><span class="token string">"sys_uuid"</span><span class="token punctuation">)</span><span class="token keyword">private</span> String id<span class="token punctuation">;</span><span class="token keyword">private</span> String name<span class="token punctuation">;</span><span class="token comment">//……省略get/set方法</span><span class="token punctuation">}</span></code></pre> <p><b>第4步：</b> 创建操作对应数据库的<code>Repository</code>，与<code>JavaBean</code>的分包方式一致。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220603/889a29ffd625d0855598149029b7bd16.jpg" alt="SpringBoot2.0.4配置多个数据库"></p> <p><strong>User1Repository的代码如下：</strong></p> <pre><code class="prism language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xyh<span class="token punctuation">.</span>test<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>test1<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xyh<span class="token punctuation">.</span>test<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>test1<span class="token punctuation">.</span>User1<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>JpaRepository<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token keyword">interface</span><span class="token class-name">User1Repository</span><span class="token keyword">extends</span><span class="token class-name">JpaRepository</span><span class="token generics function"><span class="token punctuation">&lt;</span>User1<span class="token punctuation">,</span>String<span class="token punctuation">&gt;</span></span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span></code></pre> <p><strong>User2Repository的代码如下：</strong></p> <pre><code class="prism language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xyh<span class="token punctuation">.</span>test<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>test2<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xyh<span class="token punctuation">.</span>test<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>test2<span class="token punctuation">.</span>User2<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>JpaRepository<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token keyword">interface</span><span class="token class-name">User2Repository</span><span class="token keyword">extends</span><span class="token class-name">JpaRepository</span><span class="token generics function"><span class="token punctuation">&lt;</span>User2<span class="token punctuation">,</span>String<span class="token punctuation">&gt;</span></span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span></code></pre> <p><b>第5步：</b> 整合配置和Bean、配置事务的配置类，test1对应的类是<code>Test1DataSourceConfig</code>，test2对应的类是<code>Test2DataSourceConfig</code>，前面几步对JavaBean和repository进行分包，都是在这个类中进行配置区分的。</p> <p><strong>Test1DataSourceConfig代码如下：</strong></p> <pre><code class="prism language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xyh<span class="token punctuation">.</span>test<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Qualifier<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>orm<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>HibernateSettings<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>orm<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>JpaProperties<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>orm<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>EntityManagerFactoryBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Primary<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>config<span class="token punctuation">.</span>EnableJpaRepositories<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>orm<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>JpaTransactionManager<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>orm<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>LocalContainerEntityManagerFactoryBean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>PlatformTransactionManager<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>EnableTransactionManagement<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span>EntityManager<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DataSource<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableTransactionManagement</span><span class="token annotation punctuation">@EnableJpaRepositories</span><span class="token punctuation">(</span>         entityManagerFactoryRef<span class="token operator">=</span><span class="token string">"entityManagerFactoryTest1"</span><span class="token punctuation">,</span>         transactionManagerRef<span class="token operator">=</span><span class="token string">"transactionManagerTest1"</span><span class="token punctuation">,</span>         basePackages<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token string">"com.xyh.test.repository.test1"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//设置repository所在位置</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">Test1DataSourceConfig</span><span class="token punctuation">{<!-- --></span><span class="token annotation punctuation">@Autowired</span><span class="token punctuation">(</span>required<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token comment">//required=true表示bean必须存在，否则注入失败，默认为true</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"test1DataSource"</span><span class="token punctuation">)</span><span class="token keyword">private</span> DataSource test1DataSource<span class="token punctuation">;</span><span class="token annotation punctuation">@Primary</span><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"entityManagerTest1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> EntityManager<span class="token function">entityManager</span><span class="token punctuation">(</span>EntityManagerFactoryBuilder builder<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token function">entityManagerFactoryTest1</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createEntityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> JpaProperties jpaProperties<span class="token punctuation">;</span><span class="token keyword">private</span> Map<span class="token generics function"><span class="token punctuation">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token punctuation">&gt;</span></span><span class="token function">getVendorProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span> jpaProperties<span class="token punctuation">.</span><span class="token function">getHibernateProperties</span><span class="token punctuation">(</span><span class="token keyword">new</span><span class="token class-name">HibernateSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Primary</span><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"entityManagerFactoryTest1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> LocalContainerEntityManagerFactoryBean<span class="token function">entityManagerFactoryTest1</span><span class="token punctuation">(</span>EntityManagerFactoryBuilder builder<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">dataSource</span><span class="token punctuation">(</span>test1DataSource<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">packages</span><span class="token punctuation">(</span><span class="token string">"com.xyh.test.entity.test1"</span><span class="token punctuation">)</span><span class="token comment">//设置实体类所在位置</span><span class="token punctuation">.</span><span class="token function">persistenceUnit</span><span class="token punctuation">(</span><span class="token string">"test1PersistenceUnit"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">properties</span><span class="token punctuation">(</span><span class="token function">getVendorProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Primary</span><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"transactionManagerTest1"</span><span class="token punctuation">)</span>     PlatformTransactionManager<span class="token function">transactionManagerSecondary</span><span class="token punctuation">(</span>EntityManagerFactoryBuilder builder<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">new</span><span class="token class-name">JpaTransactionManager</span><span class="token punctuation">(</span><span class="token function">entityManagerFactoryTest1</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p><strong>Test2DataSourceConfig代码如下：</strong></p> <pre><code class="prism language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xyh<span class="token punctuation">.</span>test<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Qualifier<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>orm<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>HibernateSettings<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>orm<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>JpaProperties<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>orm<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>EntityManagerFactoryBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>config<span class="token punctuation">.</span>EnableJpaRepositories<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>orm<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>JpaTransactionManager<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>orm<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>LocalContainerEntityManagerFactoryBean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>PlatformTransactionManager<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>EnableTransactionManagement<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Resource<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span>EntityManager<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DataSource<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableTransactionManagement</span><span class="token annotation punctuation">@EnableJpaRepositories</span><span class="token punctuation">(</span>         entityManagerFactoryRef<span class="token operator">=</span><span class="token string">"entityManagerFactoryTest2"</span><span class="token punctuation">,</span>         transactionManagerRef<span class="token operator">=</span><span class="token string">"transactionManagerTest2"</span><span class="token punctuation">,</span>         basePackages<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token string">"com.xyh.test.repository.test2"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//repository类的包</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">Test2DataSourceConfig</span><span class="token punctuation">{<!-- --></span><span class="token annotation punctuation">@Resource</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"test2DataSource"</span><span class="token punctuation">)</span><span class="token keyword">private</span> DataSource test2DataSource<span class="token punctuation">;</span><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"entityManagerTest2"</span><span class="token punctuation">)</span><span class="token keyword">public</span> EntityManager<span class="token function">entityManager</span><span class="token punctuation">(</span>EntityManagerFactoryBuilder builder<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token function">entityManagerFactoryTest2</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createEntityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Resource</span><span class="token keyword">private</span> JpaProperties jpaProperties<span class="token punctuation">;</span><span class="token keyword">private</span> Map<span class="token generics function"><span class="token punctuation">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token punctuation">&gt;</span></span><span class="token function">getVendorProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span> jpaProperties<span class="token punctuation">.</span><span class="token function">getHibernateProperties</span><span class="token punctuation">(</span><span class="token keyword">new</span><span class="token class-name">HibernateSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/**      * 设置实体类所在位置      */</span><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"entityManagerFactoryTest2"</span><span class="token punctuation">)</span><span class="token keyword">public</span> LocalContainerEntityManagerFactoryBean<span class="token function">entityManagerFactoryTest2</span><span class="token punctuation">(</span>EntityManagerFactoryBuilder builder<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">dataSource</span><span class="token punctuation">(</span>test2DataSource<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">packages</span><span class="token punctuation">(</span><span class="token string">"com.xyh.test.entity.test2"</span><span class="token punctuation">)</span><span class="token comment">//javabean的包</span><span class="token punctuation">.</span><span class="token function">persistenceUnit</span><span class="token punctuation">(</span><span class="token string">"test2PersistenceUnit"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">properties</span><span class="token punctuation">(</span><span class="token function">getVendorProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"transactionManagerTest2"</span><span class="token punctuation">)</span><span class="token keyword">public</span> PlatformTransactionManager<span class="token function">transactionManagerTest2</span><span class="token punctuation">(</span>EntityManagerFactoryBuilder builder<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">new</span><span class="token class-name">JpaTransactionManager</span><span class="token punctuation">(</span><span class="token function">entityManagerFactoryTest2</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <h4><a id="_326" rel="nofollow"></a>四、测试</h4> <p>写一个<code>controller</code>，然后分别注入不同的<code>Repository</code>，调用相应save方法，可以看到相应的数据库表增加了一条记录。</p> <pre><code class="prism language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">IndexController</span><span class="token punctuation">{<!-- --></span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> User1Repository user1Repository<span class="token punctuation">;</span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> User2Repository user2Repository<span class="token punctuation">;</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String<span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>          User1 user1<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">User1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         user1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"user1Name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         user1Repository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>          User2 user2<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">User2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         user2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"user2Name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          user2Repository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token string">"hello world"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-66282.htm">layui中select更改后生效</a></p>
                                        <p>下一个：<a href="/news/article-66915.htm">宠物医院美团好评回复 宠物医院美团好评回复优美语句</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-37420.htm" title="宠物店寄养会有什么风险（宠物店寄养一般怎么收费）">宠物店寄养会有什么风险（宠物店寄养一般怎么收费）</a></li>
                        <li class="py-2"><a href="/news/article-44858.htm" title="动物疫苗审批流程（动物疫苗审批流程表）">动物疫苗审批流程（动物疫苗审批流程表）</a></li>
                        <li class="py-2"><a href="/news/article-35671.htm" title="猫咪疫苗要打几针才算完成（猫咪疫苗打几针疫苗时间间隔）">猫咪疫苗要打几针才算完成（猫咪疫苗打几针疫苗时间间隔）</a></li>
                        <li class="py-2"><a href="/news/article-39899.htm" title="成都兽医站（成都兽医站招聘）">成都兽医站（成都兽医站招聘）</a></li>
                        <li class="py-2"><a href="/news/article-65677.htm" title="制作狗粮设备一台多少钱的简单介绍">制作狗粮设备一台多少钱的简单介绍</a></li>
                        <li class="py-2"><a href="/news/article-39387.htm" title="劳动节福利~ 我给大家写了个博客园快速发文工具_在线工具">劳动节福利~ 我给大家写了个博客园快速发文工具_在线工具</a></li>
                        <li class="py-2"><a href="/news/article-40387.htm" title="我被猫咬了,没去***,会不会死人（被猫咬伤了没打疫苗要紧吗）">我被猫咬了,没去***,会不会死人（被猫咬伤了没打疫苗要紧吗）</a></li>
                        <li class="py-2"><a href="/news/article-63826.htm" title="vue 安装sass_vue 中 node-sass  如何安装。安装sass">vue 安装sass_vue 中 node-sass  如何安装。安装sass</a></li>
                        <li class="py-2"><a href="/news/article-45350.htm" title="在拦截器中获取 url 路径里面 @PathVariable 的参数值">在拦截器中获取 url 路径里面 @PathVariable 的参数值</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-21-sing-box-node-share.htm" title="1月21日 | SingBox每天更新22.1M/S免费节点订阅链接">1月21日 | SingBox每天更新22.1M/S免费节点订阅链接</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">18</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">83</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </section>
                <footer class="pt-4 pb-5 bg-light position-relative">
            <div class="container">
                <div class="row">
                    <div class="col-md-12 mt-4">
                    <p>
                        <a href="/">首页</a> | 
                        <a href="/free-node/">免费节点</a> | 
                        <a href="/news/">新闻资讯</a> |
                        <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
                        <a href="/">SingBox Windows免费节点订阅站</a> 版权所有 Powered by WordPress
                    </div>
                </div>
                <!--/.row-->
            </div>
            <!--/.container-->
        </footer>
        <script src="/assets/website/js/frontend/singboxwindows/jquery-3.5.1.min.js"></script>
        <script src="https://cdn.bootcdn.net/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
        <script src="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
        <script src="/assets/website/js/frontend/singboxwindows/app.js"></script>
        <script src="/assets/website/js/frontend/G.js"></script>
    </main>
</body>

</html>