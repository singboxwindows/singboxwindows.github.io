<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://singboxwindows.github.io/news/article-81570.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>SpringAop实现原理及代理模式</title>
        <meta name="description" content="Spring的AOP就是通过动态代理实现的。当为某个Bean或者某些Bean配置切面时，Spring会为其创建代理对象，当调用该对象的某个方法时，实际是调用生成的代理类的对象方法。Spring的Aop" />
        <link rel="icon" href="/assets/website/img/singboxwindows/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="SingBox Windows免费节点订阅站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://singboxwindows.github.io/news/article-81570.htm" />
    <meta property="og:site_name" content="SingBox Windows免费节点订阅站" />
    <meta property="og:title" content="SpringAop实现原理及代理模式" />
    <meta property="og:image" content="https://singboxwindows.github.io/uploads/20240731/fc86be9497a0e7ba7bd3cfb3ba899ba3.webp" />
        <meta property="og:release_date" content="2025-03-26T08:54:44" />
    <meta property="og:updated_time" content="2025-03-26T08:54:44" />
        <meta property="og:description" content="Spring的AOP就是通过动态代理实现的。当为某个Bean或者某些Bean配置切面时，Spring会为其创建代理对象，当调用该对象的某个方法时，实际是调用生成的代理类的对象方法。Spring的Aop" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="SpringAop实现原理及代理模式">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">

    <link rel="stylesheet" href="/assets/website/css/singboxwindows/app.css">
    <link href="https://fonts.googleapis.com/css?family=Nunito:300,400,500,600,700,800,900&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://maxcdn.icons8.com/fonts/line-awesome/1.1/css/line-awesome-font-awesome.min.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-B99XD3HGG8"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-B99XD3HGG8');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <nav class="navbar navbar-expand-lg fixed-top py-3 navbar-light" id="mainNav">
        <div class="container"> 
            <a class="navbar-brand" href="/">
                        <span>SingBox Windows</span>
                        </a>
            <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarResponsive" aria-controls="navbarResponsive" aria-expanded="false" aria-label="Toggle navigation"> <span class="navbar-toggler-icon"></span> </button>
            <div class="collapse navbar-collapse" id="navbarResponsive">
                <ul class="navbar-nav ml-auto">
                                        <li class="nav-item"> <a class="nav-link" href="/">首页</a> </li>
                                        <li class="nav-item"> <a class="nav-link" href="/free-nodes/">免费节点</a> </li>
                                        <li class="nav-item"> <a class="nav-link" href="/paid-subscribe/">推荐机场</a> </li>
                                        <li class="nav-item"> <a class="nav-link" href="/client.htm">客户端</a> </li>
                                        <li class="nav-item"> <a class="nav-link" href="/news/">新闻资讯</a> </li>
                                    </ul>
            </div>
        </div>
    </nav>
    <main role="main">
        <div class="contact_header jumbotron text-center">
            <h1 class="display-4">SpringAop实现原理及代理模式</h1>
            <p>
                <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / <span>正文</span>
            </p>
        </div>
        <section class="bg-image-2 position-relative"> <img src="/assets/website/img/singboxwindows/mix-icons.png" alt="" class="bg-img-2">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				</h1> <pre><code>Spring的AOP就是通过动态代理实现的。当为某个Bean或者某些Bean配置切面时，Spring会为其创建代理对象，当调用该对象的某个方法时，实际是调用生成的代理类的对象方法。Spring的Aop主要是使用了两个动态代理，分别是JDK的动态代理和CGLIB动态代理。</code></pre> <h2 id="1-jdk动态代理">1. JDK动态代理</h2> <pre><code> 如果代理类实现了接口，Spring默认会使用JDK动态代理。JDK的动态代理是基于反射实现。JDK通过反射，生成一个代理类，这个代理类实现了原来那个类的全部接口，并对接口中定义的所有方法进行了代理。当我们通过代理对象执行原来那个类的方法时，代理类底层会通过反射机制，调用我们实现的InvocationHandler接口的invoke方法。</code></pre> <details> <summary>点击查看代码</summary> <pre><code>/*  *  接口类  */ public interface Person {      void say(); }  /*  *  接口实现类  */ public class Man implements Person {      private String word;      public Man(String word){          this.word = word;     }      public Man(){      }      public void say(){          System.out.println("Man Can Say " + word);     } }  public class ManJDKProxy implements InvocationHandler {      /**      * 需要的代理对象      */     private Object o;      public Object bind(Object o){          this.o = o;         return Proxy.newProxyInstance(o.getClass().getClassLoader(), o.getClass().getInterfaces(), this);     }      @Override     public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {          System.out.println("JDK Proxy Design");         return method.invoke(o, args);     } }  /**  * JDK动态代理  */ public class ProxyDesign_2 {      public static void main(String[] args) {          Man man = new Man("Hello");          Person p = (Person)new ManJDKProxy().bind(man);          p.say();     } }</code></pre> </details> <h3 id="-jdk动态代理的优缺点">* JDK动态代理的优缺点</h3> <pre><code>优点：     1. JDK动态代理是JDK原生的，不需要任何依赖即可使用     2. 通过反射机制生成代理类的速度要比CGLib操作字节码生成代理类的速度更快 缺点：     1. 如果要使用JDK动态代理，被代理的类必须实现了接口，否则无法代理(InvocationHandler)     2. JDK动态代理无法为没有在接口中定义的方法实现代理     3. JDK动态代理执行代理方法时，需要通过反射机制进行回调，此时方法执行的效率比较低</code></pre> <h2 id="2-cglib动态代理">2. CGLIB动态代理</h2> <pre><code> 若需要代理的类没有实现接口，JDK的动态代理就无法使用，Spring会使用CGLiB动态代理来生成代理对象。CGLiB直接操作字节码，生成类的子类，重写类的方法完成代理。</code></pre> <details> <summary>点击查看代码</summary> <pre><code>/*  *  接口类  */ public interface Person {      void say(); }  /*  *  接口实现类  */ public class Man implements Person {      private String word;      public Man(String word){          this.word = word;     }      public Man(){      }      public void say(){          System.out.println("Man Can Say " + word);     } }  public class ManCGLIBProxy {      public Object bind(Object target){          Enhancer enhancer = new Enhancer();         enhancer.setSuperclass(target.getClass());          enhancer.setCallback(new MethodInterceptor() {             @Override             public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable {                  System.out.println("CGLIB Proxy Design");                 return method.invoke(target, objects);             }         });          return enhancer.create();     } }  /**  * CGLIB动态代理  */ public class ProxyDesign_3 {      public static void main(String[] args) {          Man man = new Man("Hello");          Person p = (Person)new ManCGLIBProxy().bind(man);          p.say();     } }</code></pre> </details> <h3 id="-cglib动态代理的优缺点">* CGLiB动态代理的优缺点</h3> <pre><code>优点：     1. 使用CGLIB代理的类，不需要实现接口，因为CGLIB生成的代理类是直接继承自需要被代理的类     2. CGLIB是通过修改字节码生成的代理类，所以CGLIB执行代理方法的效率要高于JDK的动态代理 缺点：     1. 因为CGLIB实现方式是重写父类的方法，所以对final方法，或者private方法是没有办法代理的     2. 因为CGLIB生成代理类的方式是通过操作字节码(asm工具包)，这种生成的代理类的方式比JDK通过反射生成代理类的方式的效率低</code></pre> <h2 id="3-spring项目中如何强制使用cglib代理方式">3. Spring项目中如何强制使用CGLIB代理方式</h2> <h3 id="-xml方式">* xml方式</h3> <pre><code>&lt;!-- aop:config用来在xml中配置切面，指定proxy-target-class="true" --&gt; &lt;aop:config proxy-target-class="true"&gt; 	&lt;!-- AOP相关配置 --&gt; &lt;/aop:config&gt;</code></pre> <h3 id="-aspect注解方式">* @Aspect注解方式</h3> <pre><code>&lt;!-- 将proxy-target-class配置设置为true --&gt; &lt;aop:aspectj-autoproxy proxy-target-class="true"/&gt;</code></pre> <h3 id="-配置类注解方式">* 配置类注解方式</h3> <pre><code>添加@EnableAspectJAutoProxy(proxyTargetClass = true)</code></pre> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-81569.htm">Vue路由router详细总结</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-35671.htm" title="猫咪疫苗要打几针才算完成（猫咪疫苗打几针疫苗时间间隔）">猫咪疫苗要打几针才算完成（猫咪疫苗打几针疫苗时间间隔）</a></li>
                        <li class="py-2"><a href="/news/article-47315.htm" title="深圳领养狗狗的机构有哪些（深圳领养狗狗的机构有哪些公司）">深圳领养狗狗的机构有哪些（深圳领养狗狗的机构有哪些公司）</a></li>
                        <li class="py-2"><a href="/news/article-36460.htm" title="青岛南京路动物防疫站宠物医院在哪里（青岛市南京路动物防疫站）">青岛南京路动物防疫站宠物医院在哪里（青岛市南京路动物防疫站）</a></li>
                        <li class="py-2"><a href="/news/article-37420.htm" title="宠物店寄养会有什么风险（宠物店寄养一般怎么收费）">宠物店寄养会有什么风险（宠物店寄养一般怎么收费）</a></li>
                        <li class="py-2"><a href="/news/article-55139.htm" title="bash: virtualenv: command not found">bash: virtualenv: command not found</a></li>
                        <li class="py-2"><a href="/news/article-41874.htm" title="可以从宠物医院买疫苗自己回家打吗（可以去宠物店买疫苗自己打吗）">可以从宠物医院买疫苗自己回家打吗（可以去宠物店买疫苗自己打吗）</a></li>
                        <li class="py-2"><a href="/news/article-48262.htm" title="全国十大兽药厂家排名 中国最好的兽药厂家">全国十大兽药厂家排名 中国最好的兽药厂家</a></li>
                        <li class="py-2"><a href="/news/article-36935.htm" title="合肥宠物领养中心电话号码 合肥宠物领养中心电话号码多少">合肥宠物领养中心电话号码 合肥宠物领养中心电话号码多少</a></li>
                        <li class="py-2"><a href="/news/article-54597.htm" title="动物疫苗使用管理（动物疫苗使用管理规范）">动物疫苗使用管理（动物疫苗使用管理规范）</a></li>
                        <li class="py-2"><a href="/news/article-78855.htm" title="动物疫苗的使用方法及注意事项视频教程大全 动物疫苗的使用方法及注意事项视频教程大全图片">动物疫苗的使用方法及注意事项视频教程大全 动物疫苗的使用方法及注意事项视频教程大全图片</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">78</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">83</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </section>
                <footer class="pt-4 pb-5 bg-light position-relative">
            <div class="container">
                <div class="row">
                    <div class="col-md-12 mt-4">
                    <p>
                        <a href="/">首页</a> | 
                        <a href="/free-node/">免费节点</a> | 
                        <a href="/news/">新闻资讯</a> |
                        <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
                        <a href="/">SingBox Windows免费节点订阅站</a> 版权所有 Powered by WordPress
                    </div>
                </div>
                <!--/.row-->
            </div>
            <!--/.container-->
        </footer>
        <script src="/assets/website/js/frontend/singboxwindows/jquery-3.5.1.min.js"></script>
        <script src="https://cdn.bootcdn.net/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
        <script src="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
        <script src="/assets/website/js/frontend/singboxwindows/app.js"></script>
        <script src="/assets/website/js/frontend/G.js"></script>
    </main>
</body>

</html>