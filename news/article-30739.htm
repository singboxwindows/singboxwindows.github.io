<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://singboxwindows.github.io/news/article-30739.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Java核心知识1：泛型机制详解</title>
        <meta name="description" content="JDK 1.5开始引入Java泛型（generics）这个特性，该特性提供了编译时类型安全检测机制，允许程序员在编译时检测到非法的类型。泛型的本质是参数化类型，即给类型指定一个参数，然后在使用时再指定" />
        <link rel="icon" href="/assets/website/img/singboxwindows/favicon.ico" type="image/x-icon"/>
    <link rel="stylesheet" href="/assets/website/css/singboxwindows/app.css">
    <link href="https://fonts.googleapis.com/css?family=Nunito:300,400,500,600,700,800,900&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://maxcdn.icons8.com/fonts/line-awesome/1.1/css/line-awesome-font-awesome.min.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-B99XD3HGG8"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-B99XD3HGG8');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <nav class="navbar navbar-expand-lg fixed-top py-3 navbar-light" id="mainNav">
        <div class="container"> 
                        <a class="navbar-brand" href="/">Sing Box Windows</a>
                        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarResponsive" aria-controls="navbarResponsive" aria-expanded="false" aria-label="Toggle navigation"> <span class="navbar-toggler-icon"></span> </button>
            <div class="collapse navbar-collapse" id="navbarResponsive">
                <ul class="navbar-nav ml-auto">
                                        <li class="nav-item"> <a class="nav-link" href="/">首页</a> </li>
                                        <li class="nav-item"> <a class="nav-link" href="/free-nodes/">免费节点</a> </li>
                                        <li class="nav-item"> <a class="nav-link" href="/paid-subscribe/">推荐机场</a> </li>
                                        <li class="nav-item"> <a class="nav-link" href="/news/">新闻资讯</a> </li>
                                        <li class="nav-item"> <a class="nav-link" href="#">关于</a> </li>
                    <li class="nav-item"> <a class="nav-link" href="#">联系</a> </li>
                </ul>
            </div>
        </div>
    </nav>
    <main role="main">
        <div class="contact_header jumbotron text-center">
            <h1 class="display-4">Java核心知识1：泛型机制详解</h1>
            <p>
                <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / <span>正文</span>
            </p>
        </div>
        <section class="bg-image-2 position-relative"> <img href="/assets/website/img/singboxwindows/mix-icons.png" alt="" class="bg-img-2">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				</h1> <p>JDK 1.5开始引入Java泛型（generics）这个特性，该特性提供了编译时类型安全检测机制，允许程序员在编译时检测到非法的类型。<br /><font color="#ff0000">泛型的本质是参数化类型，即给类型指定一个参数，然后在使用时再指定此参数具体的值，那样这个类型就可以在使用时决定了。</font>这种参数类型可以用在类、接口和方法中，分别被称为泛型类、泛型接口、泛型方法。<br /> 为了兼容之前的版本，Java泛型的实现采取了“伪泛型”的策略，即Java在语法上支持泛型，但是在编译阶段会进行所谓的“类型擦除”（Type Erasure），将所有的泛型表示（尖括号中的内容）都替换为具体的类型（其对应的原生态类型）。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/c394a96b8c9d90c3b41b9feeb386f16f.jpg" alt="Java核心知识1：泛型机制详解"></p> </h1> <p>泛型有四个作用：类型安全、自动转换、性能提升、可复用性。即在编译的时候检查类型安全，将所有的强制转换都自动和隐式进行，同时提高代码的可复用性。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/3b751fb90567d9099f64654611933792.jpg" alt="Java核心知识1：泛型机制详解"></p> <h2 id="21-泛型如何保证类型安全">2.1 泛型如何保证类型安全</h2> <p>在没有泛型之前，从集合中读取到的每一个对象都必须进行类型转换，如果不小心插入了错误的类型对象，在运行时的转换处理就会出错。<br /> 比如：没有泛型的情况下使用集合：</p> <pre><code>public static void noGenericTest() {         // 编译正常通过，但是使用的时候可能转换处理出现问题         ArrayList arr = new ArrayList();         arr.add("加入一个字符串");         arr.add(1);         arr.add('a');     }</code></pre> <p>有泛型的情况下使用集合：</p> <pre><code>public static void genericTest() {         // 编译不通过，直接提示异常，Required type：String         ArrayList&lt;String&gt; arr = new ArrayList&lt;&gt;();         arr.add("加入一个字符串");         arr.add(1);         arr.add('a');     }</code></pre> <p>有了泛型后，会对类型进行验证，所以集合arr在编译的时候add(1)、add('a') 都会编译不通过。<br /> 这个过程相当于告诉编译器每个集合接收的对象类型是什么，编译器在编译期就会做类型检查，告知是否插入了错误类型的对象，使得程序更加安全，增强了程序的健壮性。</p> <h2 id="22-类型自动转换消除强转">2.2 类型自动转换，消除强转</h2> <p>泛型的另一个好处是消除源代码中的强制类型转换，这样代码可读性更强，且减少了转换类型出错的可能性。<br /> 以下面的代码为例子，以下代码段需要强制转换，否则编译会通不过：</p> <pre><code>ArrayList list  = new ArrayList(); list.add(1); int i = (int) list.get(0);  // 需强转</code></pre> <p>当重写为使用泛型时，代码不需要强制转换：</p> <pre><code>ArrayList&lt;Integer&gt; list  = new ArrayList&lt;&gt;(); list.add(1); int i = list.get(0);  // 无需转换</code></pre> <h2 id="23-避免装箱拆箱提高性能">2.3 避免装箱、拆箱，提高性能</h2> <p>在非泛型编程中，将简单类型作为Object传递时会引起Boxing（装箱）和Unboxing（拆箱）操作，这两个过程都是具有很大开销的。引入泛型后，就不必进行Boxing和Unboxing操作了，所以运行效率相对较高，特别在对集合操作非常频繁的系统中，这个特点带来的性能提升更加明显。<br /> 泛型变量固定了类型，使用的时候就已经知道是值类型还是引用类型，避免了不必要的装箱、拆箱操作。</p> <pre><code>object a=1;//由于是object类型，会自动进行装箱操作。 &nbsp; int b=(int)a;//强制转换，拆箱操作。这样一去一来，当次数多了以后会影响程序的运行效率。</code></pre> <p>使用泛型后</p> <pre><code>public static T GetValue&lt;T&gt;(T a) { 　　return a; }   public static void Main(){ 　　int b=GetValue&lt;int&gt;(1);//使用这个方法的时候已经指定了类型是int，所以不会有装箱和拆箱的操作。 }</code></pre> <h2 id="24-提升程序可复用性">2.4 提升程序可复用性</h2> <p>引入泛型的另一个意义在于：适用于多种数据类型执行相同的代码（代码复用）<br /> 我们通过下面的例子来说明，代码如下：</p> <pre><code>private static int add(int a, int b) {     System.out.println(a + "+" + b + "=" + (a + b));     return a + b; }  private static float add(float a, float b) {     System.out.println(a + "+" + b + "=" + (a + b));     return a + b; }  private static double add(double a, double b) {     System.out.println(a + "+" + b + "=" + (a + b));     return a + b; }</code></pre> <p>如果没有泛型，要实现不同类型的加法，每种类型都需要重载一个add方法；通过泛型，我们可以复用为一个方法：</p> <pre><code>private static &lt;T extends Number&gt; double add(T a, T b) {     System.out.println(a + "+" + b + "=" + (a.doubleValue() + b.doubleValue()));     return a.doubleValue() + b.doubleValue(); }</code></pre> </h1> <h2 id="31-泛型类">3.1 泛型类</h2> <p>泛型类是指把泛型定义在类上，具体的定义格式如下：</p> <pre><code>public class 类名 &lt;泛型类型1,...&gt; { // todo }</code></pre> <p>注意事项：泛型类型必须是引用类型，非基本数据类型<br /> 定义泛型类，在类名后添加一对尖括号，并在尖括号中填写类型参数，参数可以有多个，多个参数使用逗号分隔：</p> <pre><code>public class GenericClass&lt;ab,a,c&gt; {   // todo }</code></pre> <p>当然，这个后面的参数类型也是有规范的，不能像上面一样随意，通常类型参数我们都使用大写的单个字母表，可以任意指定，但是还是建议使用有字面含义的，让人通俗易懂，下面的字母可以参考使用：<br /><font color="#ff0000"><br /> T：任意类型 type<br /> E：集合中元素的类型 element<br /> K：key-value形式 key<br /> V： key-value形式 value<br /> N： Number（数值类型）<br /> ？： 表示不确定的java类型<br /></font></p> <p>这边举个例子，假设我们写一个通用的返回对象，对象中的某个字段的类型不定：</p> <pre><code>@Data public class Response&lt;T&gt; {     /**      * 状态      */     private boolean status;     /**      * 编码      */     private Integer code;     /**      * 消息      */     private String msg;     /**      * 接口返回内容，不同的接口返回的内容不一致，使用泛型数据      */     private T data;      /**      * 构造      * @param status      * @param code      * @param msg      * @param data      */     public Response(boolean status,int code,String msg,T data) {         this.status = status;         this.code = code;         this.msg = msg;         this.data = data;     } }</code></pre> <p>做成泛型类，他的通用性就很强了，这时候他返回的情况可能如下：<br /> 先定义一个用户信息对象</p> <pre><code>@Data public class UserInfo {     /**      * 用户编号      */     private String userCode;     /**      * 用户名称      */     private String userName; }</code></pre> <p>尝试返回不同的数据类型：</p> <pre><code>        /**          * 返回字符串          */         Response&lt;String&gt; responseStr = new Response&lt;&gt;(true,200,"success","Hello Word");          /**          * 返回用户对象          */         UserInfo userInfo = new UserInfo();         userInfo.setUserCode("123456");         userInfo.setUserName("Brand");         Response&lt;UserInfo&gt; responseObj = new Response&lt;&gt;(true,200,"success",userInfo);</code></pre> <p>输出结果如下：</p> <pre><code>{ 	"status": true, 	"code": 200, 	"msg": "success", 	"data": "Hello Word" } // 和 { 	"status": true, 	"code": 200, 	"msg": "success", 	"data": { 		"user_code": "123456", 		"user_name": "Brand" 	} }</code></pre> <h2 id="32-泛型接口">3.2 泛型接口</h2> <p>泛型方法概述：把泛型定义在接口上，他的格式如下</p> <pre><code>public interface 接口名&lt;T&gt; {   // todo }</code></pre> <p><font color="#ff0000"> 注意点1：方法声明中定义的形参只能在该方法里使用，而接口、类声明中定义的类型形参则可以在整个接口、类中使用。当调用fun()方法时，根据传入的实际对象，编译器就会判断出类型形参T所代表的实际类型。</font></p> <pre><code>public interface GenericInterface&lt;T&gt; { void show(T value);} } public class StringShowImpl implements GenericInterface&lt;String&gt; { @Override public void show(String value) { System.out.println(value); }} &nbsp; public class NumberShowImpl implements GenericInterface&lt;Integer&gt; { @Override public void show(Integer value) { System.out.println(value); }}</code></pre> <p><font color="#ff0000"> 注意点2：使用泛型的时候，前后定义的泛型类型必须保持一致，否则会出现编译异常：</font></p> <pre><code>// 编译的时候会报错，因为前后类型不一致 GenericInterface&lt;String&gt; genericInterface = new NumberShowImpl(); // 编译正常，前面泛型接口不指定类型，由new后面的实例化来推导。 GenericInterface g1 = new NumberShowImpl(); GenericInterface g2 = new StringShowImpl();</code></pre> <h2 id="33-泛型方法">3.3 泛型方法</h2> <p>泛型方法，是在调用方法的时候指明泛型的具体类型 。定义格式如下：</p> <pre><code>public &lt;泛型类型&gt; 返回类型 方法名（泛型类型 变量名） {    // todo }</code></pre> <p>举例说明，下面是一个典型的泛型方法，根据传入的对象，打印它的值和类型：</p> <pre><code>/** &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* 泛型方法&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param &lt;T&gt; 泛型的类型 	 &nbsp;* @param c 传入泛型的参数对象 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @return T 返回值为T类型 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* 说明： &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;1）public 与 返回值中间&lt;T&gt;非常重要，可以理解为声明此方法为泛型方法。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;2）只有声明了&lt;T&gt;的方法才是泛型方法，泛型类中的使用了泛型的成员方法并不是泛型方法。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;3）&lt;T&gt;表明该方法将使用泛型类型T，此时才可以在方法中使用泛型类型T。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;4）与泛型类的定义一样，此处T可以随便写为任意标识，常见的如T、E等形式的参数常用于表示泛型。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/ &nbsp;&nbsp;&nbsp;&nbsp;public &lt;T&gt; T genercMethod(T c) { &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(c.getClass()); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(c); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return c; &nbsp;&nbsp;&nbsp;}&nbsp; &nbsp; public static void main(String[] args) { &nbsp;&nbsp;&nbsp;&nbsp;GenericsClassDemo&lt;String&gt; genericString&nbsp;&nbsp;= new GenericsClassDemo("Hello World"); //这里的泛型跟下面调用的泛型方法可以不一样。 &nbsp;&nbsp;&nbsp;&nbsp;String str = genericString.genercMethod("brand");//传入的是String类型,返回的也是String类型 &nbsp;&nbsp;&nbsp;&nbsp;Integer i = genericString.genercMethod(100);//传入的是Integer类型,返回的也是Integer类型 }</code></pre> <p>输出结果如下：</p> <pre><code>class java.lang.String brand&nbsp; &nbsp; class java.lang.Integer 100</code></pre> <p>从上面可以看出，泛型方法随着我们的传入参数类型不同，执行的效果不同，拿到的结果也不一样。泛型方法能使方法独立于类而产生变化。</p> <h2 id="34-泛型通配符上下界">3.4 泛型通配符（上下界）</h2> <p>Java泛型的通配符是用于解决泛型之间引用传递问题的特殊语法, 主要有以下三类:</p> <ul> <li>  无边界的通配符，使用精确的参数类型</li> <li>  关键字声明了类型的上界，表示参数化的类型可能是所指定的类型，或者是此类型的子类</li> <li>  关键字声明了类型的下界，表示参数化的类型可能是指定的类型，或者是此类型的父类</li> </ul> <p>结构如下：</p> <pre><code>// 表示类型参数可以是任何类型 public class B&lt;?&gt; { }   // 上界：表示类型参数必须是A或者是A的子类 public class B&lt;T extends A&gt; { }   // 下界：表示类型参数必须是A或者是A的超类型 public class B&lt;T supers A&gt; { }</code></pre> <p>上界示例：</p> <pre><code>class Info&lt;T extends Number&gt;{    // 此处泛型只能是数字类型     private T var ;        // 定义泛型变量     public void setVar(T var){         this.var = var ;     }     public T getVar(){         return this.var ;     }     public String toString(){    // 直接打印         return this.var.toString() ;     } } public class demo1{     public static void main(String args[]){         Info&lt;Integer&gt; i1 = new Info&lt;Integer&gt;() ;        // 声明Integer的泛型对象     } }</code></pre> <p>下界示例：</p> <pre><code>class Info&lt;T&gt;{     private T var ;        // 定义泛型变量     public void setVar(T var){         this.var = var ;     }     public T getVar(){         return this.var ;     }     public String toString(){    // 直接打印         return this.var.toString() ;     } } public class GenericsDemo21{     public static void main(String args[]){         Info&lt;String&gt; i1 = new Info&lt;String&gt;() ;        // 声明String的泛型对象         Info&lt;Object&gt; i2 = new Info&lt;Object&gt;() ;        // 声明Object的泛型对象         i1.setVar("hello") ;         i2.setVar(new Object()) ;         fun(i1) ;         fun(i2) ;     }     public static void fun(Info&lt;? super String&gt; temp){    // 只能接收String或Object类型的泛型，String类的父类只有Object类         System.out.print(temp + ", ") ;     } }</code></pre> </h1> <p>Java泛型这个特性是从JDK 1.5才开始加入的，因此为了兼容之前的版本，Java泛型的实现采取了“伪泛型”的策略，即Java在语法上支持泛型，但是在编译阶段会进行所谓的“类型擦除”（Type Erasure），<br /> 将所有的泛型表示（尖括号中的内容）都替换为具体的类型（其对应的原生态类型），就像完全没有泛型一样。<br /><font color="#ff0000"> 泛型本质是将数据类型参数化，它通过擦除的方式来实现，即编译器会在编译期间「擦除」泛型语法并相应的做出一些类型转换动作。</font></p> <h2 id="41-泛型的类型擦除原则">4.1 泛型的类型擦除原则</h2> <ul> <li>消除类型参数声明，即删除&lt;&gt;及其包围的部分。</li> <li>根据类型参数的上下界推断并替换所有的类型参数为原生态类型：如果类型参数是无限制通配符或没有上下界限定则替换为Object，如果存在上下界限定则根据子类替换原则取类型参数的最左边限定类型（即父类）。</li> <li>为了保证类型安全，必要时插入强制类型转换代码。</li> <li>自动产生“桥接方法”以保证擦除类型后的代码仍然具有泛型的“多态性”。</li> </ul> <h2 id="42-擦除的方式">4.2 擦除的方式</h2> <p>擦除类定义中的类型参数 - 无限制类型擦除<br /> 当类定义中的类型参数没有任何限制时，在类型擦除中直接被替换为Object，即形如<t>和&lt;?&gt;的类型参数都被替换为Object。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/dac19b4ba12d41a8bf2915894cd7e6e8.jpg" alt="Java核心知识1：泛型机制详解"></t></p> <p>擦除类定义中的类型参数 - 有限制类型擦除<br /> 当类定义中的类型参数存在限制（上下界）时，在类型擦除中替换为类型参数的上界或者下界，比如形如<t extends="" number="">和&lt;? extends Number&gt;的类型参数被替换为Number，&lt;? super Number&gt;被替换为Object。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/c2f64e9d7b6d8311bf0eeb11dfdb8bf1.jpg" alt="Java核心知识1：泛型机制详解"></t></p> <p>擦除方法定义中的类型参数<br /> 擦除方法定义中的类型参数原则和擦除类定义中的类型参数是一样的，这里仅以擦除方法定义中的有限制类型参数为例。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/ca5f67b64aaa8fec27e807b2e65a73eb.jpg" alt="Java核心知识1：泛型机制详解"></p> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-30257.htm">小猫要养多久才会认识我的家（小猫一般养几天才能认识主人）</a></p>
                                        <p>下一个：<a href="/news/article-30740.htm">动物园宠物医生待遇（动物医院工作怎么样）</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2024-11-14-sing-box-github.htm" title="11月14日 | SingBox每天更新19.4M/S免费节点订阅链接">11月14日 | SingBox每天更新19.4M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-24195.htm" title="宠物美容师学校（宠物美容师学校信阳）">宠物美容师学校（宠物美容师学校信阳）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-16-sing-box-node.htm" title="12月16日 | SingBox每天更新21.4M/S免费节点订阅链接">12月16日 | SingBox每天更新21.4M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-25582.htm" title="动物疫苗行业分析报告 动物疫苗行业分析报告怎么写">动物疫苗行业分析报告 动物疫苗行业分析报告怎么写</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-9-17-sing-box-node-github.htm" title="9月17日 | SingBox每天更新21M/S免费节点订阅链接">9月17日 | SingBox每天更新21M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-29776.htm" title="[已解决]pymysql查询语句中带有in时传递参数的问题">[已解决]pymysql查询语句中带有in时传递参数的问题</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-6-free-subscribe-node.htm" title="11月6日 | SingBox每天更新18.9M/S免费节点订阅链接">11月6日 | SingBox每天更新18.9M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-23-latest-sing-box-node.htm" title="12月23日 | SingBox每天更新21M/S免费节点订阅链接">12月23日 | SingBox每天更新21M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-8-free-node-subscribe-links.htm" title="12月8日 | SingBox每天更新18M/S免费节点订阅链接">12月8日 | SingBox每天更新18M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-29777.htm" title="springboot的依赖管理和自动配置">springboot的依赖管理和自动配置</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">77</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">34</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-09/" title="2024-09 归档">2024-09</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">2</span> <a href="/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </section>
                <footer class="pt-4 pb-5 bg-light position-relative">
            <div class="container">
                <div class="row">
                    <div class="col-md-12 mt-4">
                    <p>
                        <a href="/">首页</a> | 
                        <a href="/free-node/">免费节点</a> | 
                        <a href="/news/">新闻资讯</a> |
                        <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
                        <a href="/">SingBox Windows免费节点订阅站</a> 版权所有 Powered by WordPress
                    </div>
                </div>
                <!--/.row-->
            </div>
            <!--/.container-->
        </footer>
        <script src="/assets/website/js/frontend/singboxwindows/jquery-3.5.1.min.js"></script>
        <script src="https://cdn.bootcdn.net/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
        <script src="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
        <script src="/assets/website/js/frontend/singboxwindows/app.js"></script>
        <script src="/assets/website/js/frontend/G.js"></script>
    </main>
</body>

</html>